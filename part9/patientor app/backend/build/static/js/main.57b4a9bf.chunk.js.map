{"version":3,"sources":["types.ts","constants.ts","state/state.tsx","AddPatientModal/FormField.tsx","AddPatientModal/AddPatientForm.tsx","AddPatientModal/index.tsx","components/HealthRatingBar.tsx","PatientListPage/index.tsx","App.tsx","index.tsx","state/reducer.ts"],"names":["Gender","apiBaseUrl","initialState","patients","StateContext","createContext","useStateValue","useContext","SelectField","name","label","options","Form","Field","as","className","map","option","key","value","TextField","field","placeholder","style","color","genderOptions","Male","Female","Other","AddPatientForm","onSubmit","onCancel","initialValues","ssn","dateOfBirth","occupation","gender","validate","values","errors","isValid","dirty","component","Grid","Column","floated","width","Button","type","onClick","disabled","AddPatientModal","modalOpen","onClose","error","Modal","open","centered","closeIcon","Header","Content","Segment","inverted","HEALTHBAR_TEXTS","HealthRatingBar","rating","showText","Rating","icon","maxRating","PatientListPage","dispatch","React","useState","setModalOpen","setError","closeModal","undefined","Container","textAlign","Table","celled","Row","HeaderCell","Body","Object","patient","id","Cell","a","async","axios","post","newPatient","data","payload","console","response","App","useEffect","get","patientListFromApi","fetchPatientList","Link","to","primary","Divider","hidden","path","render","ReactDOM","reducer","children","useReducer","state","Provider","action","reduce","memo","document","getElementById"],"mappings":"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","file":"static/js/main.57b4a9bf.chunk.js","sourcesContent":["export interface Diagnosis {\r\n  code: string;\r\n  name: string;\r\n  latin?: string;\r\n}\r\n\r\nexport enum Gender {\r\n  Male = \"male\",\r\n  Female = \"female\",\r\n  Other = \"other\"\r\n}\r\n\r\nexport interface Patient {\r\n  id: string;\r\n  name: string;\r\n  occupation: string;\r\n  gender: Gender;\r\n  ssn?: string;\r\n  dateOfBirth?: string;\r\n}\r\n","export const apiBaseUrl = 'http://localhost:3001/api';\r\n","import React, { createContext, useContext, useReducer } from \"react\";\r\nimport { Patient } from \"../types\";\r\n\r\nimport { Action } from \"./reducer\";\r\n\r\nexport type State = {\r\n  patients: { [id: string]: Patient };\r\n};\r\n\r\nconst initialState: State = {\r\n  patients: {}\r\n};\r\n\r\nexport const StateContext = createContext<[State, React.Dispatch<Action>]>([\r\n  initialState,\r\n  () => initialState\r\n]);\r\n\r\ntype StateProviderProps = {\r\n  reducer: React.Reducer<State, Action>;\r\n  children: React.ReactElement;\r\n};\r\n\r\nexport const StateProvider: React.FC<StateProviderProps> = ({\r\n  reducer,\r\n  children\r\n}: StateProviderProps) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  return (\r\n    <StateContext.Provider value={[state, dispatch]}>\r\n      {children}\r\n    </StateContext.Provider>\r\n  );\r\n};\r\nexport const useStateValue = () => useContext(StateContext);\r\n","import React from \"react\";\r\nimport { ErrorMessage, Field, FieldProps, FormikProps } from \"formik\";\r\nimport { Dropdown, DropdownProps, Form } from \"semantic-ui-react\";\r\nimport { Diagnosis, Gender } from \"../types\";\r\n\r\n// structure of a single option\r\nexport type GenderOption = {\r\n  value: Gender;\r\n  label: string;\r\n};\r\n\r\n// props for select field component\r\ntype SelectFieldProps = {\r\n  name: string;\r\n  label: string;\r\n  options: GenderOption[];\r\n};\r\n\r\nexport const SelectField: React.FC<SelectFieldProps> = ({\r\n  name,\r\n  label,\r\n  options\r\n}: SelectFieldProps) => (\r\n  <Form.Field>\r\n    <label>{label}</label>\r\n    <Field as=\"select\" name={name} className=\"ui dropdown\">\r\n      {options.map(option => (\r\n        <option key={option.value} value={option.value}>\r\n          {option.label || option.value}\r\n        </option>\r\n      ))}\r\n    </Field>\r\n  </Form.Field>\r\n);\r\n\r\ninterface TextProps extends FieldProps {\r\n  label: string;\r\n  placeholder: string;\r\n}\r\n\r\nexport const TextField: React.FC<TextProps> = ({\r\n  field,\r\n  label,\r\n  placeholder\r\n}) => (\r\n  <Form.Field>\r\n    <label>{label}</label>\r\n    <Field placeholder={placeholder} {...field} />\r\n    <div style={{ color:'red' }}>\r\n      <ErrorMessage name={field.name} />\r\n    </div>\r\n  </Form.Field>\r\n);\r\n\r\n/*\r\n  for exercises 9.24.-\r\n*/\r\ninterface NumberProps extends FieldProps {\r\n  label: string;\r\n  errorMessage?: string;\r\n  min: number;\r\n  max: number;\r\n}\r\n\r\nexport const NumberField: React.FC<NumberProps> = ({ field, label, min, max }) => (\r\n  <Form.Field>\r\n    <label>{label}</label>\r\n    <Field {...field} type='number' min={min} max={max} />\r\n\r\n    <div style={{ color:'red' }}>\r\n      <ErrorMessage name={field.name} />\r\n    </div>\r\n  </Form.Field>\r\n);\r\n\r\nexport const DiagnosisSelection = ({\r\n  diagnoses,\r\n  setFieldValue,\r\n  setFieldTouched\r\n}: {\r\n  diagnoses: Diagnosis[];\r\n  setFieldValue: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldValue\"];\r\n  setFieldTouched: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldTouched\"];\r\n}) => {\r\n  const field = \"diagnosisCodes\";\r\n  const onChange = (\r\n    _event: React.SyntheticEvent<HTMLElement, Event>,\r\n    data: DropdownProps\r\n  ) => {\r\n    setFieldTouched(field, true);\r\n    setFieldValue(field, data.value);\r\n  };\r\n\r\n  const stateOptions = diagnoses.map(diagnosis => ({\r\n    key: diagnosis.code,\r\n    text: `${diagnosis.name} (${diagnosis.code})`,\r\n    value: diagnosis.code\r\n  }));\r\n\r\n  return (\r\n    <Form.Field>\r\n      <label>Diagnoses</label>\r\n      <Dropdown\r\n        fluid\r\n        multiple\r\n        search\r\n        selection\r\n        options={stateOptions}\r\n        onChange={onChange}\r\n      />\r\n      <ErrorMessage name={field} />\r\n    </Form.Field>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form } from \"formik\";\r\n\r\nimport { TextField, SelectField, GenderOption } from \"./FormField\";\r\nimport { Gender, Patient } from \"../types\";\r\n\r\n/*\r\n * use type Patient, but omit id and entries,\r\n * because those are irrelevant for new patient object.\r\n */\r\nexport type PatientFormValues = Omit<Patient, \"id\" | \"entries\">;\r\n\r\ninterface Props {\r\n  onSubmit: (values: PatientFormValues) => void;\r\n  onCancel: () => void;\r\n}\r\n\r\nconst genderOptions: GenderOption[] = [\r\n  { value: Gender.Male, label: \"Male\" },\r\n  { value: Gender.Female, label: \"Female\" },\r\n  { value: Gender.Other, label: \"Other\" }\r\n];\r\n\r\nexport const AddPatientForm: React.FC<Props> = ({ onSubmit, onCancel }) => {\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        name: \"\",\r\n        ssn: \"\",\r\n        dateOfBirth: \"\",\r\n        occupation: \"\",\r\n        gender: Gender.Other\r\n      }}\r\n      onSubmit={onSubmit}\r\n      validate={values => {\r\n        const requiredError = \"Field is required\";\r\n        const errors: { [field: string]: string } = {};\r\n        if (!values.name) {\r\n          errors.name = requiredError;\r\n        }\r\n        if (!values.ssn) {\r\n          errors.ssn = requiredError;\r\n        }\r\n        if (!values.dateOfBirth) {\r\n          errors.dateOfBirth = requiredError;\r\n        }\r\n        if (!values.occupation) {\r\n          errors.occupation = requiredError;\r\n        }\r\n        return errors;\r\n      }}\r\n    >\r\n      {({ isValid, dirty }) => {\r\n        return (\r\n          <Form className=\"form ui\">\r\n            <Field\r\n              label=\"Name\"\r\n              placeholder=\"Name\"\r\n              name=\"name\"\r\n              component={TextField}\r\n            />\r\n            <Field\r\n              label=\"Social Security Number\"\r\n              placeholder=\"SSN\"\r\n              name=\"ssn\"\r\n              component={TextField}\r\n            />\r\n            <Field\r\n              label=\"Date Of Birth\"\r\n              placeholder=\"YYYY-MM-DD\"\r\n              name=\"dateOfBirth\"\r\n              component={TextField}\r\n            />\r\n            <Field\r\n              label=\"Occupation\"\r\n              placeholder=\"Occupation\"\r\n              name=\"occupation\"\r\n              component={TextField}\r\n            />\r\n            <SelectField\r\n              label=\"Gender\"\r\n              name=\"gender\"\r\n              options={genderOptions}\r\n            />\r\n            <Grid>\r\n              <Grid.Column floated=\"left\" width={5}>\r\n                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                  Cancel\r\n                </Button>\r\n              </Grid.Column>\r\n              <Grid.Column floated=\"right\" width={5}>\r\n                <Button\r\n                  type=\"submit\"\r\n                  floated=\"right\"\r\n                  color=\"green\"\r\n                  disabled={!dirty || !isValid}\r\n                >\r\n                  Add\r\n                </Button>\r\n              </Grid.Column>\r\n            </Grid>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default AddPatientForm;\r\n","import React from 'react';\r\nimport { Modal, Segment } from 'semantic-ui-react';\r\nimport AddPatientForm, { PatientFormValues } from './AddPatientForm';\r\n\r\ninterface Props {\r\n  modalOpen: boolean;\r\n  onClose: () => void;\r\n  onSubmit: (values: PatientFormValues) => void;\r\n  error?: string;\r\n}\r\n\r\nconst AddPatientModal = ({ modalOpen, onClose, onSubmit, error }: Props) => (\r\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\r\n    <Modal.Header>Add a new patient</Modal.Header>\r\n    <Modal.Content>\r\n      {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\r\n      <AddPatientForm onSubmit={onSubmit} onCancel={onClose} />\r\n    </Modal.Content>\r\n  </Modal>\r\n);\r\n\r\nexport default AddPatientModal;\r\n","import React from 'react';\r\nimport { Rating } from 'semantic-ui-react';\r\n\r\ntype BarProps = {\r\n  rating: number;\r\n  showText: boolean;\r\n};\r\n\r\nconst HEALTHBAR_TEXTS = [\r\n  'The patient is in great shape',\r\n  'The patient has a low risk of getting sick',\r\n  'The patient has a high risk of getting sick',\r\n  'The patient has a diagnosed condition',\r\n];\r\n\r\nconst HealthRatingBar = ({ rating, showText }: BarProps) => {\r\n  return (\r\n    <div className=\"health-bar\">\r\n      {<Rating icon=\"heart\" disabled rating={4 - rating} maxRating={4} />}\r\n      {showText ? <p>{HEALTHBAR_TEXTS[rating]}</p> : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HealthRatingBar;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { Container, Table, Button } from \"semantic-ui-react\";\r\n\r\nimport { PatientFormValues } from \"../AddPatientModal/AddPatientForm\";\r\nimport AddPatientModal from \"../AddPatientModal\";\r\nimport { Patient } from \"../types\";\r\nimport { apiBaseUrl } from \"../constants\";\r\nimport HealthRatingBar from \"../components/HealthRatingBar\";\r\nimport { useStateValue } from \"../state\";\r\n\r\nconst PatientListPage: React.FC = () => {\r\n  const [{ patients }, dispatch] = useStateValue();\r\n\r\n  const [modalOpen, setModalOpen] = React.useState<boolean>(false);\r\n  const [error, setError] = React.useState<string | undefined>();\r\n\r\n  const openModal = (): void => setModalOpen(true);\r\n\r\n  const closeModal = (): void => {\r\n    setModalOpen(false);\r\n    setError(undefined);\r\n  };\r\n\r\n  const submitNewPatient = async (values: PatientFormValues) => {\r\n    try {\r\n      const { data: newPatient } = await axios.post<Patient>(\r\n        `${apiBaseUrl}/patients`,\r\n        values\r\n      );\r\n      dispatch({ type: \"ADD_PATIENT\", payload: newPatient });\r\n      closeModal();\r\n    } catch (e) {\r\n      console.error(e.response.data);\r\n      setError(e.response.data.error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Container textAlign=\"center\">\r\n        <h3>Patient list</h3>\r\n      </Container>\r\n      <Table celled>\r\n        <Table.Header>\r\n          <Table.Row>\r\n            <Table.HeaderCell>Name</Table.HeaderCell>\r\n            <Table.HeaderCell>Gender</Table.HeaderCell>\r\n            <Table.HeaderCell>Occupation</Table.HeaderCell>\r\n            <Table.HeaderCell>Health Rating</Table.HeaderCell>\r\n          </Table.Row>\r\n        </Table.Header>\r\n        <Table.Body>\r\n          {Object.values(patients).map((patient: Patient) => (\r\n            <Table.Row key={patient.id}>\r\n              <Table.Cell>{patient.name}</Table.Cell>\r\n              <Table.Cell>{patient.gender}</Table.Cell>\r\n              <Table.Cell>{patient.occupation}</Table.Cell>\r\n              <Table.Cell>\r\n                <HealthRatingBar showText={false} rating={1} />\r\n              </Table.Cell>\r\n            </Table.Row>\r\n          ))}\r\n        </Table.Body>\r\n      </Table>\r\n      <AddPatientModal\r\n        modalOpen={modalOpen}\r\n        onSubmit={submitNewPatient}\r\n        error={error}\r\n        onClose={closeModal}\r\n      />\r\n      <Button onClick={() => openModal()}>Add New Patient</Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PatientListPage;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\r\nimport { Button, Divider, Header, Container } from \"semantic-ui-react\";\r\n\r\nimport { apiBaseUrl } from \"./constants\";\r\nimport { useStateValue } from \"./state\";\r\nimport { Patient } from \"./types\";\r\n\r\nimport PatientListPage from \"./PatientListPage\";\r\n\r\nconst App: React.FC = () => {\r\n  const [, dispatch] = useStateValue();\r\n  React.useEffect(() => {\r\n    axios.get<void>(`${apiBaseUrl}/ping`);\r\n\r\n    const fetchPatientList = async () => {\r\n      try {\r\n        const { data: patientListFromApi } = await axios.get<Patient[]>(\r\n          `${apiBaseUrl}/patients`\r\n        );\r\n        dispatch({ type: \"SET_PATIENT_LIST\", payload: patientListFromApi });\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    };\r\n    fetchPatientList();\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Container>\r\n          <Header as=\"h1\">Patientor</Header>\r\n          <Button as={Link} to=\"/\" primary>\r\n            Home\r\n          </Button>\r\n          <Divider hidden />\r\n          <Switch>\r\n            <Route path=\"/\" render={() => <PatientListPage />} />\r\n          </Switch>\r\n        </Container>\r\n      </Router>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport App from './App';\r\nimport { reducer, StateProvider } from \"./state\";\r\n\r\nReactDOM.render(\r\n  <StateProvider reducer={reducer}>\r\n    <App />\r\n  </StateProvider>,\r\n  document.getElementById('root')\r\n);\r\n","import { State } from \"./state\";\r\nimport { Patient } from \"../types\";\r\n\r\nexport type Action =\r\n  | {\r\n      type: \"SET_PATIENT_LIST\";\r\n      payload: Patient[];\r\n    }\r\n  | {\r\n      type: \"ADD_PATIENT\";\r\n      payload: Patient;\r\n    };\r\n\r\nexport const reducer = (state: State, action: Action): State => {\r\n  switch (action.type) {\r\n    case \"SET_PATIENT_LIST\":\r\n      return {\r\n        ...state,\r\n        patients: {\r\n          ...action.payload.reduce(\r\n            (memo, patient) => ({ ...memo, [patient.id]: patient }),\r\n            {}\r\n          ),\r\n          ...state.patients\r\n        }\r\n      };\r\n    case \"ADD_PATIENT\":\r\n      return {\r\n        ...state,\r\n        patients: {\r\n          ...state.patients,\r\n          [action.payload.id]: action.payload\r\n        }\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n"],"sourceRoot":""}